name: Deploy to DigitalOcean

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run tests (if any)
      run: |
        cd backend
        npm test || echo "No tests defined"
    
    - name: Check for security vulnerabilities
      run: |
        cd backend
        npm audit --audit-level high

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Docker Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to DigitalOcean
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /opt/milesafe
          
          # Pull latest changes from GitHub
          git fetch origin
          git reset --hard origin/main
          git pull origin main
          
          # Update environment variables if needed
          if [ -f .env.production ]; then
            cp .env.production .env
          fi
          
          # Pull latest Docker images
          docker-compose pull
          
          # Restart services with zero downtime
          docker-compose up -d --build --remove-orphans
          
          # Clean up old images
          docker image prune -f
          
          # Health check
          sleep 30
          curl -f http://localhost:3000/health || exit 1
          
          echo "Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    name: Notify Deployment Status
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "✅ Deployment to DigitalOcean successful!"
        # Add Slack/Discord/Email notification here if needed
    
    - name: Notify on failure
      if: ${{ needs.deploy.result == 'failure' }}
      run: |
        echo "❌ Deployment to DigitalOcean failed!"
        # Add failure notification here if needed
